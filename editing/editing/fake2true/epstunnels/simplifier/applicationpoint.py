# 
# Author(s):
# Matteo Spallanzani <spmatteo@iis.ee.ethz.ch>
# 
# Copyright (c) 2020-2022 ETH Zurich and University of Bologna.
# 
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
# http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# 

import torch.fx as fx
from typing import Set, NamedTuple


class CandidateEpsTunnelConstruct(NamedTuple):
    """A candidate ``EpsTunnel`` construct.

    Given a computational graph, an ``EpsTunnel`` construct is a sub-graph
    satisfying two properties:
      * all its inputs and outputs are ``EpsTunnel``s; in particular, an
        ``EpsTunnel`` candidate is the intersection between the descendant
        sub-graph of its inbound nodes and the ancestor sub-graph of its
        outbound nodes (when the descendant and ancestor sub-graphs are
        computed with respect to the data graph to which the ``EpsTunnel``s
        belong);
      * the intermediate nodes do not modify the scales of their operands.

    A candidate ``EpsTunnel`` construct satisfies only the first (topological)
    property. We name its frontier of inbound and outbound ``EpsTunnel``s its
    **generating frontier**, since the construct's graph can be generated by
    intersecting the descendant sub-graph of its inbound nodes with the
    ancestor sub-graph of its outbound nodes (when computing the descendants
    and ancestor sub-graphs with respect to the data graph to which the
    ``EpsTunnel``s belong).

    A real ``EpsTunnel`` construct also satisfies the second (semantic)
    property. This check can be applied to a candidate ``EpsTunnel`` construct
    in two steps:
      * the shapes of the scale ``torch.Tensor``s of all ``EpsTunnel``s are
        equal;
      * the output scales of the inbound ``EpsTunnel``s and the input scales
        of the outbound ``EpsTunnel``s have the same values.

    """
    backward: Set[fx.Node]
    forward:  Set[fx.Node]

    def is_empty(self) -> bool:
        return len(self.backward) == 0 and len(self.forward) == 0
